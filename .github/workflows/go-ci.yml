name: Go CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'



    - name: Install dependencies
      run: go mod tidy

    - name: Install swag CLI
      run: go install github.com/swaggo/swag/cmd/swag@v1.16.6
      env:
        GOBIN: /usr/local/bin

    - name: Generate Swagger docs
      run: swag init -g cmd/main.go

    - name: Check for uncommitted Swagger docs
      run: git diff --exit-code docs/
      continue-on-error: true

    - name: Build with version info
      run: |
        VERSION=$(git describe --tags --always --dirty)
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        go build -ldflags "-X 'github.com/mgmacri/pool-maintenance-app/internal/version.Version=$VERSION' -X 'github.com/mgmacri/pool-maintenance-app/internal/version.Commit=$COMMIT' -X 'github.com/mgmacri/pool-maintenance-app/internal/version.BuildDate=$BUILD_DATE'" ./...

    - name: Run go fmt
      run: go fmt ./...

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint v2.4.0
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin v2.4.0

    - name: Run golangci-lint
      run: golangci-lint run --output.text.path=stdout

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: ${{ !env.ACT || env.ACT != 'true' }}
      with:
        name: coverage-report
        path: coverage.out

    - name: Build Docker image with version info
      run: |
        VERSION=$(git describe --tags --always --dirty)
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        # If running in ACT, use static values for reproducibility
        if [ "$ACT" = "true" ]; then
          VERSION=act
          COMMIT=act
          BUILD_DATE=1970-01-01T00:00:00Z
        fi
        docker build --build-arg VERSION=$VERSION --build-arg COMMIT=$COMMIT --build-arg BUILD_DATE=$BUILD_DATE -t pool-maintenance-api .

    - name: Install Trivy
      run: |
        sudo apt-get update && sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.65.0/trivy_0.65.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.65.0_Linux-64bit.deb

    - name: Scan Go dependencies for vulnerabilities
      run: trivy fs --scanners vuln --exit-code 1 --severity HIGH,CRITICAL .
    - name: Scan Docker image for vulnerabilities
      run: trivy image --exit-code 1 --severity HIGH,CRITICAL pool-maintenance-api

    - name: Run Docker container (background)
      run: |
        docker run -d -p 8080:8080 --name pool-maintenance-api-test pool-maintenance-api

    - name: Health check endpoint smoke test
      run: |
        sleep 3
        curl --fail http://localhost:8080/health | grep '"status":"ok"'

    - name: Cleanup Docker container
      if: always()
      run: |
        docker rm -f pool-maintenance-api-test || true
